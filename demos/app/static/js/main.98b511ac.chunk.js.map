{"version":3,"sources":["components/preview.styles.module.css","components/FilePreview.js","components/Loading.js","variables.js","api.js","App.js","reportWebVitals.js","index.js","components/loading.styles.module.css"],"names":["module","exports","PreviewTable","rows","data","map","row","index","headerClassName","classes","header","rowClassName","evenRow","oddRow","content","_index","cellIndex","cellClassName","firstCell","length","lastCell","alignmentClassName","rightAligned","generateAlignmentClassName","rowClasses","headerClasses","style","gridColumn","className","grid","FilePreview","Fragment","p","padding","Loading","side","styles","params","URL","document","location","searchParams","API_KEY","get","RECIPE_ID","ENV_ID","TENANT_ID","FLOW_ID","AWS_ENDPOINT","getOutputData","a","fetch","r","ok","undefined","json","App","React","useState","setGrid","loading","setLoading","isLinked","setLinked","useEffect","window","HotGlue","hasMounted","mount","refreshData","output","Object","keys","forEach","values","v","JSON","stringify","push","checkLinked","getLinkedFlows","then","linkedFlows","find","f","id","setTimeout","startJob","createJob","jobDetails","swal","pollJob","s3_root","jobStatus","payload","status","handleSourceLink","source","flowId","label","href","tenant","onLink","color","onClick","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.98b511ac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"preview_styles_grid__1XMHs\",\"row\":\"preview_styles_row__2fsI7\",\"header\":\"preview_styles_header__32QiA\",\"oddRow\":\"preview_styles_oddRow__k7ReU\",\"evenRow\":\"preview_styles_evenRow__1nBTW\",\"firstCell\":\"preview_styles_firstCell__1lsWo\",\"lastCell\":\"preview_styles_lastCell__36OfD\",\"rightAligned\":\"preview_styles_rightAligned__OARq-\"};","import React from 'react'\n\nimport classes from './preview.styles.module.css'\n\n// Format:\n// {\n//    [header row]\n//    [row]\n//    [row]\n//    ...\n// }\nconst PreviewTable = ({data}) => {  \n  const rows = data.map((row, index) => {\n    const headerClassName = `${index == 0 ? `${classes.row} ${classes.header}` : ''}`\n    const rowClassName = `${classes.row} ${index % 2 == 0 ? classes.evenRow : classes.oddRow}` \n    const generateCellClassName = cellIndex => `${(cellIndex == 0) ? classes.firstCell : ''} ${(cellIndex == row.length-1) ? classes.lastCell : ''}`\n\n    // I've added this here temporarily for the example, but you'd need to implement your own logic for what needs to be right aligned.\n    const generateAlignmentClassName = cellIndex => `${cellIndex >= 4 ? classes.rightAligned : ''}`\n\n    const elements = row.map((content, _index) => {\n      const cellClassName = generateCellClassName(_index)\n      const alignmentClassName = generateAlignmentClassName(_index)\n\n      const rowClasses = `${headerClassName} ${rowClassName} ${cellClassName} ${alignmentClassName}`\n      const headerClasses = `${headerClassName} ${alignmentClassName} ${cellClassName}`\n      const classes = index == 0 ? headerClasses : rowClasses\n\n      return (<div style={{ gridColumn: _index+1 }} className={classes} key={_index}>{content}</div>)\n    })\n\n    return elements\n  })\n\n  return (\n    <div className={classes.grid}>\n      {rows}\n    </div>\n  )\n}\n\nconst FilePreview = ({data}) => {\n  return (\n    <React.Fragment>\n      <p className={classes.p}>The <strong>Contacts</strong> from the CRM has been synced! See a preview of the data below.</p>\n      <div style={{padding: \"2rem\"}}>\n        <PreviewTable data={data} />\n      </div>\n    </React.Fragment>\n  )\n}\n\nexport default FilePreview;\n","import React from 'react';\nimport classes from './loading.styles.module.css'\n\nconst Loading = ({side}) => {\n    const styles = side ? {[`margin${side}`]: \"1rem\"} : {};\n    return (\n        <div className={classes[\"lds-ring\"]} style={styles}><div></div><div></div><div></div><div></div></div>\n    )\n}\n  \nexport default Loading\n","// params will be provided in search\nconst params = (new URL(document.location)).searchParams;\n\nexport const API_KEY = params.get(\"apiKey\");\nexport const RECIPE_ID = params.get(\"recipeId\");\nexport const ENV_ID = params.get(\"envId\");\nexport const TENANT_ID = params.get(\"tenantId\");\nexport const FLOW_ID = params.get(\"flowId\");\nexport const AWS_ENDPOINT = params.get(\"awsEndpoint\");\n","// Temporary AWS access to the output JSON file from hotglue\n// NOTE: In production, you would handle accessing the output in your backend!\nimport {AWS_ENDPOINT} from \"./variables\";\n\nexport async function getOutputData() {\n    // Request to S3, see if data is ready\n    const r = await fetch(AWS_ENDPOINT);\n\n    if (!r.ok) {\n        // No data yet\n        return undefined;\n    }\n\n    // Parse as JSON\n    const data = await r.json();\n\n    return data;\n};\n","import React from \"react\";\n\n// Components\nimport FilePreview from \"./components/FilePreview\";\nimport Loading from \"./components/Loading\";\n\nimport { Connections } from 'hotglue-elements';\n\n// API\nimport { getOutputData } from \"./api\";\nimport { API_KEY, ENV_ID, RECIPE_ID, TENANT_ID, FLOW_ID } from \"./variables\";\n\n// CSS\nimport './App.css';\nimport 'hotglue-elements/dist/index.css';\n\nfunction App() {\n  const [grid, setGrid] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n  const [isLinked, setLinked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (window.HotGlue && !window.HotGlue.hasMounted()) {\n      // Mount hotglue using variables\n      window.HotGlue.mount({\n          \"api_key\": API_KEY,\n          \"env_id\": ENV_ID\n      });\n    }\n  }, [window.HotGlue]);\n\n  const refreshData = async () => {\n    const data = await getOutputData();\n    if (!data) return;\n\n    const output = [Object.keys(data[0])]\n\n    // Map JSON data into a spreadsheet grid view\n    data.forEach(r => {\n      const row = Object.values(r).map(v => {\n        // If the type is not primitive, convert to string\n        if (Object(v) === v) {\n          return JSON.stringify(v);\n        }\n\n        return v;\n      });\n\n      output.push(row);\n    });\n\n    setGrid(output);\n  };\n\n  React.useEffect(() => {\n    if (!grid) {\n      // If no data, let's trigger a refresh\n      refreshData();\n    }\n  }, [grid]);\n\n  const checkLinked = () => {\n    // If hotglue not mounted yet, try again\n    if (!window.HotGlue || !window.HotGlue.hasMounted()) {\n      setTimeout(() => checkLinked(), 1000);\n      return;\n    }\n\n    // Check if the user has already linked a flow\n    window.HotGlue.getLinkedFlows(TENANT_ID).then(linkedFlows => {\n      if (linkedFlows && linkedFlows.find(f => f.id === FLOW_ID)) {\n        setLinked(true);\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    if (!isLinked)\n      checkLinked();\n  }, [isLinked]);\n\n  const startJob = async () => {\n    if (!window.HotGlue || !window.HotGlue.hasMounted()) return;\n    // Start loading\n    setLoading(true);\n\n    window.HotGlue.createJob(FLOW_ID, TENANT_ID).then(jobDetails => {\n      window.swal(\"Syncing data\", \"Starting a data sync. This may take a few minutes!\", \"success\")\n\n      window.HotGlue.pollJob(jobDetails.s3_root, FLOW_ID, TENANT_ID).then(({payload: jobStatus}) => {\n        setLoading(false);\n        if (jobStatus.status === \"JOB_COMPLETED\") {\n          window.swal(\"Data synced\", \"Contacts data has been synced successfully!\", \"success\")\n          // Go grab the output\n          refreshData();\n        } else {\n          window.swal(\"Failed to sync\", \"There was an issue syncing the data, please contact support for help.\", \"error\")\n        }\n      });\n    });\n  };\n\n  const handleSourceLink = async (source, flowId) => {\n    setLinked(true);\n    window.swal(`${source.label} linked`, \"Woohoo! You've linked a source! Now you can sync your data.\", \"success\")\n  };\n\n  return (\n    <div className=\"container\">\n      <h1>hotglue Contacts recipe</h1>\n      <p>\n        This is a React app showing an end-to-end sample of a hotglue-powered integration that pulls <strong>{RECIPE_ID}</strong> data.\n        Follow each step below to see a user experience.\n      </p>\n\n      <h2>Connect your data</h2>\n      <p>Start by connecting your {RECIPE_ID} data below! <a href=\"#\">I don't have an account.</a></p>\n      <Connections tenant={TENANT_ID} onLink={handleSourceLink} />\n\n      <h2>Trigger a job</h2>\n      {isLinked \n      ? <p>Now that our {RECIPE_ID} data is linked, the user can sync their data. You can also set a schedule to automatically sync new data.</p>\n      : <p>Once you link your {RECIPE_ID} data, you can sync it!</p>}\n      <div className=\"button\">\n        <a style={{ color: '#ffffff' }} className={`btnForward ${!isLinked && \"disabled\"}`} onClick={startJob}>\n          Sync data{loading && <Loading side={\"Left\"}/>}\n        </a>\n      </div>\n\n      <h2>Preview your data</h2>\n      {grid \n      ? <FilePreview data={grid}/>\n      : <p>Once you connect your {RECIPE_ID} data and run a sync job, data will appear here!</p>}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-ring\":\"loading_styles_lds-ring__YRoef\"};"],"sourceRoot":""}