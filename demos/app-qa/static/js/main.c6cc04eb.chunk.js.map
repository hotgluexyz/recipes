{"version":3,"sources":["components/code-block.styles.module.css","components/FilePreview.js","components/Loading.js","components/CodeBlock.js","variables.js","api.js","assets/hotglue.svg","App.js","reportWebVitals.js","index.js","components/preview.styles.module.css","components/loading.styles.module.css"],"names":["module","exports","PreviewTable","data","rows","slice","length","map","row","index","headerClassName","classes","header","rowClassName","evenRow","oddRow","content","_index","cellIndex","cellClassName","firstCell","lastCell","alignmentClassName","rightAligned","generateAlignmentClassName","rowClasses","headerClasses","style","gridColumn","className","grid","FilePreview","Loading","side","styles","CodeBlock","language","React","useState","open","setOpen","handeClick","a","onClick","button","xmlns","height","viewBox","width","d","fill","params","URL","document","location","searchParams","API_KEY","get","RECIPE_ID","ENV_ID","TENANT_ID","FLOW_ID","AWS_ENDPOINT","getOutputData","fetch","r","ok","undefined","json","App","setGrid","loading","setLoading","isLinked","setLinked","useEffect","window","HotGlue","hasMounted","mount","refreshData","output","Object","keys","forEach","values","v","JSON","stringify","push","checkLinked","getLinkedFlows","then","linkedFlows","find","f","id","setTimeout","startJob","createJob","jobDetails","swal","pollJob","s3_root","jobStatus","payload","status","handleSourceLink","source","flowId","label","src","hotglueLogo","alt","marginBottom","href","target","styleOverrides","flowContainer","padding","margin","linkedFlow","display","flexDirection","alignItems","tenant","onLink","marginLeft","color","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.c6cc04eb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"code-block_styles_button__3-dVr\"};","import React from 'react'\n\nimport classes from './preview.styles.module.css'\n\n// Format:\n// {\n//    [header row]\n//    [row]\n//    [row]\n//    ...\n// }\nconst PreviewTable = ({data}) => {\n  const rows = data.slice(0, 5 <= data.length-1 ? 5 : data.length-1).map((row, index) => {\n    const headerClassName = `${index == 0 ? `${classes.row} ${classes.header}` : ''}`\n    const rowClassName = `${classes.row} ${index % 2 == 0 ? classes.evenRow : classes.oddRow}`\n    const generateCellClassName = cellIndex => `${(cellIndex == 0) ? classes.firstCell : ''} ${(cellIndex == row.length-1) ? classes.lastCell : ''}`\n\n    // I've added this here temporarily for the example, but you'd need to implement your own logic for what needs to be right aligned.\n    const generateAlignmentClassName = cellIndex => `${cellIndex >= 4 ? classes.rightAligned : ''}`\n\n    const elements = row.map((content, _index) => {\n      const cellClassName = generateCellClassName(_index)\n      const alignmentClassName = generateAlignmentClassName(_index)\n\n      const rowClasses = `${headerClassName} ${rowClassName} ${cellClassName} ${alignmentClassName}`\n      const headerClasses = `${headerClassName} ${alignmentClassName} ${cellClassName}`\n      const classes = index == 0 ? headerClasses : rowClasses\n\n      return (<div style={{ gridColumn: _index+1 }} className={classes} key={_index}>{content}</div>)\n    })\n\n    return elements\n  })\n\n  return (\n    <div className={classes.grid}>\n      {rows}\n    </div>\n  )\n}\n\nconst FilePreview = ({data}) => {\n  return (\n    <PreviewTable data={data} />\n  )\n}\n\nexport default FilePreview;\n","import React from 'react';\nimport classes from './loading.styles.module.css'\n\nconst Loading = ({side}) => {\n    const styles = side ? {[`margin${side}`]: \"1rem\"} : {};\n    return (\n        <div className={classes[\"lds-ring\"]} style={styles}><div></div><div></div><div></div><div></div></div>\n    )\n}\n  \nexport default Loading\n","import React from 'react';\nimport classes from './code-block.styles.module.css'\n\nimport Highlight from 'react-highlight.js';\n\nconst CodeBlock = ({ language, content }) => {\n    const [open, setOpen] = React.useState(false);\n\n    const handeClick = async () => {\n        setOpen(!open);\n    };\n\n    return (\n        <>\n            <a onClick={handeClick} className={classes.button}>\n                {open ? `Hide source` : `Show source`}\n                <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24\" viewBox=\"0 0 24 24\" width=\"24\">\n                    <path d=\"M0 0h24v24H0V0z\" fill=\"none\" />\n                    <path d=\"M9.4 16.6L4.8 12l4.6-4.6L8 6l-6 6 6 6 1.4-1.4zm5.2 0l4.6-4.6-4.6-4.6L16 6l6 6-6 6-1.4-1.4z\" fill={\"rgb(255, 86, 79)\"} />\n                </svg>\n            </a>\n            {open && <Highlight language={language}>{content}</Highlight>}\n        </>\n    );\n}\n\nexport default CodeBlock\n","// params will be provided in search\nconst params = (new URL(document.location)).searchParams;\n\nexport const API_KEY = params.get(\"apiKey\");\nexport const RECIPE_ID = params.get(\"recipeId\");\nexport const ENV_ID = params.get(\"envId\");\nexport const TENANT_ID = params.get(\"tenantId\");\nexport const FLOW_ID = params.get(\"flowId\");\nexport const AWS_ENDPOINT = params.get(\"awsEndpoint\");\n","// Temporary AWS access to the output JSON file from hotglue\n// NOTE: In production, you would handle accessing the output in your backend!\nimport {AWS_ENDPOINT} from \"./variables\";\n\nexport async function getOutputData() {\n    // Request to S3, see if data is ready\n    const r = await fetch(AWS_ENDPOINT);\n\n    if (!r.ok) {\n        // No data yet\n        return undefined;\n    }\n\n    // Parse as JSON\n    const data = await r.json();\n\n    return data;\n};\n","export default __webpack_public_path__ + \"static/media/hotglue.f8814986.svg\";","import React from \"react\";\n\n// Components\nimport FilePreview from \"./components/FilePreview\";\nimport Loading from \"./components/Loading\";\nimport CodeBlock from \"./components/CodeBlock\";\n\nimport { Connections } from 'hotglue-elements';\n\n// API\nimport { getOutputData } from \"./api\";\nimport { API_KEY, ENV_ID, RECIPE_ID, TENANT_ID, FLOW_ID } from \"./variables\";\n\n// CSS\nimport './App.css';\nimport 'hotglue-elements/dist/index.css';\n\nimport hotglueLogo from './assets/hotglue.svg'\n\nfunction App() {\n  const [grid, setGrid] = React.useState();\n  const [loading, setLoading] = React.useState(false);\n  const [isLinked, setLinked] = React.useState(false);\n\n  React.useEffect(() => {\n    if (window.HotGlue && !window.HotGlue.hasMounted()) {\n      // Mount hotglue using variables\n      window.HotGlue.mount({\n        \"api_key\": API_KEY,\n        \"env_id\": ENV_ID\n      });\n    }\n  }, [window.HotGlue]);\n\n  const refreshData = async () => {\n    const data = await getOutputData();\n    if (!data) return;\n\n    const output = [Object.keys(data[0])]\n\n    // Map JSON data into a spreadsheet grid view\n    data.forEach(r => {\n      const row = Object.values(r).map(v => {\n        // If the type is not primitive, convert to string\n        if (Object(v) === v) {\n          return JSON.stringify(v);\n        }\n\n        return v;\n      });\n\n      output.push(row);\n    });\n\n    setGrid(output);\n  };\n\n  React.useEffect(() => {\n    if (!grid) {\n      // If no data, let's trigger a refresh\n      refreshData();\n    }\n  }, [grid]);\n\n  const checkLinked = () => {\n    // If hotglue not mounted yet, try again\n    if (!window.HotGlue || !window.HotGlue.hasMounted()) {\n      setTimeout(() => checkLinked(), 1000);\n      return;\n    }\n\n    // Check if the user has already linked a flow\n    window.HotGlue.getLinkedFlows(TENANT_ID).then(linkedFlows => {\n      if (linkedFlows && linkedFlows.find(f => f.id === FLOW_ID)) {\n        setLinked(true);\n      }\n    });\n  };\n\n  React.useEffect(() => {\n    if (!isLinked)\n      checkLinked();\n  }, [isLinked]);\n\n  const startJob = async () => {\n    if (!window.HotGlue || !window.HotGlue.hasMounted()) return;\n    // Start loading\n    setLoading(true);\n\n    window.HotGlue.createJob(FLOW_ID, TENANT_ID).then(jobDetails => {\n      window.swal(\"Syncing data\", \"Starting a data sync. This may take a few minutes!\", \"success\")\n\n      window.HotGlue.pollJob(jobDetails.s3_root, FLOW_ID, TENANT_ID).then(({payload: jobStatus}) => {\n        setLoading(false);\n        if (jobStatus.status === \"JOB_COMPLETED\") {\n          window.swal(\"Data synced\", \"Contacts data has been synced successfully!\", \"success\")\n          // Go grab the output\n          refreshData();\n        } else {\n          window.swal(\"Failed to sync\", \"There was an issue syncing the data, please contact support for help.\", \"error\")\n        }\n      });\n    });\n  };\n\n  const handleSourceLink = async (source, flowId) => {\n    setLinked(true);\n    window.swal(`${source.label} linked`, \"Woohoo! You've linked a source! Now you can sync your data.\", \"success\")\n  };\n\n  const connectionsStyleOverrides = {\n    flowContainer: {\n      padding: '0rem',\n      margin: '2rem'\n    },\n    linkedFlow: {\n      display: 'flex',\n      flexDirection: 'column',\n      alignItems: 'center',\n    }\n  }\n\n  return (\n    <main>\n\n      <nav>\n        <div className='container'>\n          <img src={hotglueLogo} alt='hotglue logo' style={{\n            fill: \"white\"\n          }}/>\n        </div>\n      </nav>\n      <header>\n        <div className='container'>\n          <h1>{RECIPE_ID} recipe</h1>\n          <p>\n            This is a sample React app showing an end-to-end sample of a hotglue-powered integration that pulls <strong>{RECIPE_ID}</strong> data.\n            Follow each step below to see a user experience.\n          </p>\n        </div>\n      </header>\n\n      <section className='connections'>\n        <div className='container'>\n          <h2>Connect a source</h2>\n          <p style={{marginBottom: 0}}>\n            Your users will start by connecting their <strong>{RECIPE_ID}</strong> data source.\n          </p>\n          <p>\n            Try connecting a {RECIPE_ID} source on the right.\n          </p>\n          <h3>\n            Embed the hotglue widget\n          </h3>\n          <p>\n            To add hotglue to your product, start by embedding the widget.\n          </p>\n          <CodeBlock language={\"html\"} content={`<script src=\"https://hotglue.xyz/widget.js\"></script>\n<script>\n    HotGlue.mount({\n        \"api_key\": \"${API_KEY}\",\n        \"env_id\": \"${ENV_ID}\"\n    });\n</script>`}/>\n          <a href=\"https://docs.hotglue.xyz/quickstart/embed#add-the-widget\" target=\"_blank\">Read the docs</a> \n          <h3>\n            Create an integrations page\n          </h3>\n          <p>\n            Use the hotglue-elements package to show users all the available {RECIPE_ID} sources they can connect to – directly in your product.\n          </p>\n          <CodeBlock language={\"react\"} content={`import React from \"react\"\nimport {Connections} from \"hotglue-elements\"\nimport \"hotglue-elements/dist/index.css\"\n\nfunction App() {\n  // tenant is the id of the current user\n  return <Connections tenant=\"${TENANT_ID}\" />\n}`}/>\n          <a href=\"https://docs.hotglue.xyz/quickstart/embed#react-install-hotglue-elements\" target=\"_blank\">Read the docs</a>\n        </div>\n      </section>\n\n      <aside className='connections'>\n        <div className='container'>\n          <Connections styleOverrides={connectionsStyleOverrides} tenant={TENANT_ID} onLink={handleSourceLink} />\n        </div>\n      </aside>\n\n      <section>\n        <div className='container'>\n          <h2>Trigger a job</h2>\n          {isLinked\n            ? <p>\n              Now that the user has linked their {RECIPE_ID} data, they can sync their data to your product. \n              Try it yourself on the right.\n            </p>\n            : <p>Once users link their {RECIPE_ID} data, they can sync it directly to your platform!</p>}\n          <h3>\n            Ways to start a sync job\n          </h3>\n          <p>\n            There are several ways to allow users to sync their {RECIPE_ID} data to your product:\n            <ul>\n              <li>Use the widget to add a manual sync button to your product</li>\n              <li>Create a schedule to automatically sync new data</li>\n              <li>Use hotglue's API to trigger syncs programmatically</li>\n            </ul>\n          </p>\n          <CodeBlock language={\"react\"} content={`import React from \"react\"\n\nfunction App() {\n  const startJob = async () => {\n    // Make sure HotGlue is ready\n    if (!window.HotGlue || !window.HotGlue.hasMounted()) return;\n\n    // Start the job\n    window.HotGlue.createJob(FLOW_ID, TENANT_ID).then(jobDetails => {\n      // Let the user know it started\n      window.swal(\n        \"Syncing data\",\n        \"Starting a data sync. This may take a few minutes!\",\n        \"success\"\n      )\n    });\n  };\n\n  return (\n    <button onClick={startJob}>\n      Sync data\n    </button>\n  );\n}`}/>\n          <a href=\"https://docs.hotglue.xyz/jobs/start\" target=\"_blank\">Read the docs</a>\n        </div>\n      </section>\n\n      <aside>\n        <div className='container buttonContainer'>\n          <div className=\"button\">\n            <a style={{ marginLeft: '0', color: '#ffffff' }} className={`btnForward ${!isLinked && \"disabled\"}`} onClick={startJob}>\n              {!loading ? 'Sync data' : 'Syncing'} {loading && <Loading side={\"Left\"}/>}\n            </a>\n          </div>\n        </div>\n      </aside>\n\n      <section>\n        <div className='container'>\n          <h2>Preview your data</h2>\n          {grid\n            ? <p>\n              The <strong>{RECIPE_ID}</strong> has been synced! See a preview of the data on the right.\n            </p>\n            : <>\n              <p>\n                Once users link their {RECIPE_ID} data and run a sync job, the data will be sent to your product's backend.\n              </p>\n              <p>\n                From there, use their data to power your product – try the steps above to see it in action 🚀  \n              </p>\n            </>}\n        </div>\n      </section>\n\n      <aside className='data'>\n        <div className='container'>\n          <div>\n            {grid\n              ? <FilePreview data={grid}/>\n              : <p>Once you connect your {RECIPE_ID} data and run a sync job, data will appear here!</p>}\n          </div>\n        </div>\n      </aside>\n    </main>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"grid\":\"preview_styles_grid__1XMHs\",\"row\":\"preview_styles_row__2fsI7\",\"header\":\"preview_styles_header__32QiA\",\"oddRow\":\"preview_styles_oddRow__k7ReU\",\"evenRow\":\"preview_styles_evenRow__1nBTW\",\"firstCell\":\"preview_styles_firstCell__1lsWo\",\"lastCell\":\"preview_styles_lastCell__36OfD\",\"rightAligned\":\"preview_styles_rightAligned__OARq-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"lds-ring\":\"loading_styles_lds-ring__YRoef\"};"],"sourceRoot":""}